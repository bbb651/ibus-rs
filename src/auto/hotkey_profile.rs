// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Object,Serializable};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "IBusHotkeyProfile")]
    pub struct HotkeyProfile(Object<ffi::IBusHotkeyProfile, ffi::IBusHotkeyProfileClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_hotkey_profile_get_type(),
    }
}

impl HotkeyProfile {
        pub const NONE: Option<&'static HotkeyProfile> = None;
    

    #[doc(alias = "ibus_hotkey_profile_new")]
    pub fn new() -> HotkeyProfile {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_hotkey_profile_new())
        }
    }
}

impl Default for HotkeyProfile {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::HotkeyProfile>> Sealed for T {}
}

pub trait HotkeyProfileExt: IsA<HotkeyProfile> + sealed::Sealed + 'static {
    #[doc(alias = "ibus_hotkey_profile_add_hotkey")]
    fn add_hotkey(&self, keyval: u32, modifiers: u32, event: glib::Quark) -> bool {
        unsafe {
            from_glib(ffi::ibus_hotkey_profile_add_hotkey(self.as_ref().to_glib_none().0, keyval, modifiers, event.into_glib()))
        }
    }

    #[doc(alias = "ibus_hotkey_profile_add_hotkey_from_string")]
    fn add_hotkey_from_string(&self, str: &str, event: glib::Quark) -> bool {
        unsafe {
            from_glib(ffi::ibus_hotkey_profile_add_hotkey_from_string(self.as_ref().to_glib_none().0, str.to_glib_none().0, event.into_glib()))
        }
    }

    //#[doc(alias = "ibus_hotkey_profile_filter_key_event")]
    //fn filter_key_event(&self, keyval: u32, modifiers: u32, prev_keyval: u32, prev_modifiers: u32, user_data: /*Unimplemented*/Option<Basic: Pointer>) -> glib::Quark {
    //    unsafe { TODO: call ffi:ibus_hotkey_profile_filter_key_event() }
    //}

    #[doc(alias = "ibus_hotkey_profile_lookup_hotkey")]
    fn lookup_hotkey(&self, keyval: u32, modifiers: u32) -> glib::Quark {
        unsafe {
            from_glib(ffi::ibus_hotkey_profile_lookup_hotkey(self.as_ref().to_glib_none().0, keyval, modifiers))
        }
    }

    #[doc(alias = "ibus_hotkey_profile_remove_hotkey")]
    fn remove_hotkey(&self, keyval: u32, modifiers: u32) -> bool {
        unsafe {
            from_glib(ffi::ibus_hotkey_profile_remove_hotkey(self.as_ref().to_glib_none().0, keyval, modifiers))
        }
    }

    #[doc(alias = "ibus_hotkey_profile_remove_hotkey_by_event")]
    fn remove_hotkey_by_event(&self, event: glib::Quark) -> bool {
        unsafe {
            from_glib(ffi::ibus_hotkey_profile_remove_hotkey_by_event(self.as_ref().to_glib_none().0, event.into_glib()))
        }
    }

    //#[doc(alias = "trigger")]
    //fn connect_trigger<Unsupported or ignored types>(&self, detail: Option<&str>, f: F) -> SignalHandlerId {
    //    Unimplemented user_data: *.Pointer
    //}
}

impl<O: IsA<HotkeyProfile>> HotkeyProfileExt for O {}
