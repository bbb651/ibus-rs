// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Object,Serializable};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "IBusUnicodeData")]
    pub struct UnicodeData(Object<ffi::IBusUnicodeData, ffi::IBusUnicodeDataClass>) @extends Serializable, Object;

    match fn {
        type_ => || ffi::ibus_unicode_data_get_type(),
    }
}

impl UnicodeData {
        pub const NONE: Option<&'static UnicodeData> = None;
    

    //#[doc(alias = "ibus_unicode_data_new")]
    //pub fn new(first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Basic: VarArgs) -> UnicodeData {
    //    unsafe { TODO: call ffi:ibus_unicode_data_new() }
    //}

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`UnicodeData`] objects.
            ///
            /// This method returns an instance of [`UnicodeDataBuilder`](crate::builders::UnicodeDataBuilder) which can be used to create [`UnicodeData`] objects.
            pub fn builder() -> UnicodeDataBuilder {
                UnicodeDataBuilder::new()
            }
        

    //#[doc(alias = "ibus_unicode_data_load")]
    //pub fn load(path: &str, object: /*Ignored*/Option<&glib::Object>) -> Vec<UnicodeData> {
    //    unsafe { TODO: call ffi:ibus_unicode_data_load() }
    //}

    //#[doc(alias = "ibus_unicode_data_load_async")]
    //pub fn load_async<P: Fn(&Vec<UnicodeData>) + 'static>(path: &str, object: /*Ignored*/Option<&glib::Object>, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_unicode_data_load_async() }
    //}

    #[doc(alias = "ibus_unicode_data_save")]
    pub fn save(path: &str, list: &[UnicodeData]) {
        assert_initialized_main_thread!();
        unsafe {
            ffi::ibus_unicode_data_save(path.to_glib_none().0, list.to_glib_none().0);
        }
    }
}

impl Default for UnicodeData {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`UnicodeData`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct UnicodeDataBuilder {
            builder: glib::object::ObjectBuilder<'static, UnicodeData>,
        }

        impl UnicodeDataBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn alias(self, alias: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("alias", alias.into()), }
                        }

                            pub fn block_name(self, block_name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("block-name", block_name.into()), }
                        }

                            pub fn code(self, code: u32) -> Self {
                            Self { builder: self.builder.property("code", code), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`UnicodeData`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> UnicodeData {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::UnicodeData>> Sealed for T {}
}

pub trait UnicodeDataExt: IsA<UnicodeData> + sealed::Sealed + 'static {
    #[doc(alias = "ibus_unicode_data_get_alias")]
    #[doc(alias = "get_alias")]
    fn alias(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_unicode_data_get_alias(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_unicode_data_get_block_name")]
    #[doc(alias = "get_block_name")]
    fn block_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_unicode_data_get_block_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_unicode_data_get_code")]
    #[doc(alias = "get_code")]
    fn code(&self) -> char {
        unsafe {
            std::convert::TryFrom::try_from(ffi::ibus_unicode_data_get_code(self.as_ref().to_glib_none().0)).expect("conversion from an invalid Unicode value attempted")
        }
    }

    #[doc(alias = "ibus_unicode_data_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_unicode_data_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_unicode_data_set_block_name")]
    fn set_block_name(&self, block_name: &str) {
        unsafe {
            ffi::ibus_unicode_data_set_block_name(self.as_ref().to_glib_none().0, block_name.to_glib_none().0);
        }
    }

    fn set_alias(&self, alias: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"alias", alias)
    }

    fn set_name(&self, name: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"name", name)
    }

    #[doc(alias = "alias")]
    fn connect_alias_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_alias_trampoline<P: IsA<UnicodeData>, F: Fn(&P) + 'static>(this: *mut ffi::IBusUnicodeData, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UnicodeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::alias\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_alias_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "block-name")]
    fn connect_block_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_block_name_trampoline<P: IsA<UnicodeData>, F: Fn(&P) + 'static>(this: *mut ffi::IBusUnicodeData, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UnicodeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::block-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_block_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<UnicodeData>, F: Fn(&P) + 'static>(this: *mut ffi::IBusUnicodeData, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(UnicodeData::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<UnicodeData>> UnicodeDataExt for O {}
