// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Object};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "IBusService")]
    pub struct Service(Object<ffi::IBusService, ffi::IBusServiceClass>) @extends Object;

    match fn {
        type_ => || ffi::ibus_service_get_type(),
    }
}

impl Service {
        pub const NONE: Option<&'static Service> = None;
    

    #[doc(alias = "ibus_service_new")]
    pub fn new(connection: &gio::DBusConnection, path: &str) -> Service {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_service_new(connection.to_glib_none().0, path.to_glib_none().0))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Service`] objects.
            ///
            /// This method returns an instance of [`ServiceBuilder`](crate::builders::ServiceBuilder) which can be used to create [`Service`] objects.
            pub fn builder() -> ServiceBuilder {
                ServiceBuilder::new()
            }
        
}

impl Default for Service {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Service`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ServiceBuilder {
            builder: glib::object::ObjectBuilder<'static, Service>,
        }

        impl ServiceBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn connection(self, connection: &gio::DBusConnection) -> Self {
                            Self { builder: self.builder.property("connection", connection.clone()), }
                        }

                            pub fn object_path(self, object_path: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("object-path", object_path.into()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Service`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Service {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Service>> Sealed for T {}
}

pub trait ServiceExt: IsA<Service> + sealed::Sealed + 'static {
    #[doc(alias = "ibus_service_emit_signal")]
    fn emit_signal(&self, dest_bus_name: &str, interface_name: &str, signal_name: &str, parameters: &glib::Variant) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::ibus_service_emit_signal(self.as_ref().to_glib_none().0, dest_bus_name.to_glib_none().0, interface_name.to_glib_none().0, signal_name.to_glib_none().0, parameters.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "ibus_service_get_connection")]
    #[doc(alias = "get_connection")]
    fn connection(&self) -> Option<gio::DBusConnection> {
        unsafe {
            from_glib_none(ffi::ibus_service_get_connection(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_service_get_object_path")]
    #[doc(alias = "get_object_path")]
    fn object_path(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_service_get_object_path(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_service_register")]
    fn register(&self, connection: &gio::DBusConnection) -> Result<(), glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let is_ok = ffi::ibus_service_register(self.as_ref().to_glib_none().0, connection.to_glib_none().0, &mut error);
            debug_assert_eq!(is_ok == glib::ffi::GFALSE, !error.is_null());
            if error.is_null() { Ok(()) } else { Err(from_glib_full(error)) }
        }
    }

    #[doc(alias = "ibus_service_unregister")]
    fn unregister(&self, connection: &gio::DBusConnection) {
        unsafe {
            ffi::ibus_service_unregister(self.as_ref().to_glib_none().0, connection.to_glib_none().0);
        }
    }

    fn set_connection(&self, connection: Option<&gio::DBusConnection>) {
        ObjectExt::set_property(self.as_ref(),"connection", connection)
    }

    #[doc(alias = "connection")]
    fn connect_connection_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connection_trampoline<P: IsA<Service>, F: Fn(&P) + 'static>(this: *mut ffi::IBusService, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Service::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connection\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_connection_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Service>> ServiceExt for O {}
