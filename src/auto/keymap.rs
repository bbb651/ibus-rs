// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::{Object};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "IBusKeymap")]
    pub struct Keymap(Object<ffi::IBusKeymap, ffi::IBusKeymapClass>) @extends Object;

    match fn {
        type_ => || ffi::ibus_keymap_get_type(),
    }
}

impl Keymap {
        pub const NONE: Option<&'static Keymap> = None;
    

    #[doc(alias = "ibus_keymap_new")]
    pub fn new(name: &str) -> Keymap {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_keymap_new(name.to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_keymap_get")]
    pub fn get(name: &str) -> Option<Keymap> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::ibus_keymap_get(name.to_glib_none().0))
        }
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Keymap>> Sealed for T {}
}

pub trait KeymapExt: IsA<Keymap> + sealed::Sealed + 'static {
    #[doc(alias = "ibus_keymap_lookup_keysym")]
    fn lookup_keysym(&self, keycode: u16, state: u32) -> u32 {
        unsafe {
            ffi::ibus_keymap_lookup_keysym(self.as_ref().to_glib_none().0, keycode, state)
        }
    }
}

impl<O: IsA<Keymap>> KeymapExt for O {}
