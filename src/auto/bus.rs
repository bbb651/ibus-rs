// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT
#![allow(deprecated)]

use crate::{Component,Config,EngineDesc,InputContext,Object};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "IBusBus")]
    pub struct Bus(Object<ffi::IBusBus, ffi::IBusBusClass>) @extends Object;

    match fn {
        type_ => || ffi::ibus_bus_get_type(),
    }
}

impl Bus {
        pub const NONE: Option<&'static Bus> = None;
    

    #[doc(alias = "ibus_bus_new")]
    pub fn new() -> Bus {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_bus_new())
        }
    }

    #[doc(alias = "ibus_bus_new_async")]
    pub fn new_async() -> Bus {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_bus_new_async())
        }
    }

    #[doc(alias = "ibus_bus_new_async_client")]
    pub fn new_async_client() -> Bus {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::ibus_bus_new_async_client())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Bus`] objects.
            ///
            /// This method returns an instance of [`BusBuilder`](crate::builders::BusBuilder) which can be used to create [`Bus`] objects.
            pub fn builder() -> BusBuilder {
                BusBuilder::new()
            }
        
}

impl Default for Bus {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Bus`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct BusBuilder {
            builder: glib::object::ObjectBuilder<'static, Bus>,
        }

        impl BusBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn client_only(self, client_only: bool) -> Self {
                            Self { builder: self.builder.property("client-only", client_only), }
                        }

                            pub fn connect_async(self, connect_async: bool) -> Self {
                            Self { builder: self.builder.property("connect-async", connect_async), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Bus`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Bus {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Bus>> Sealed for T {}
}

pub trait BusExt: IsA<Bus> + sealed::Sealed + 'static {
    #[doc(alias = "ibus_bus_add_match")]
    fn add_match(&self, rule: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_add_match(self.as_ref().to_glib_none().0, rule.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_add_match_async")]
    //fn add_match_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, rule: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_add_match_async() }
    //}

    #[doc(alias = "ibus_bus_create_input_context")]
    fn create_input_context(&self, client_name: &str) -> Option<InputContext> {
        unsafe {
            from_glib_full(ffi::ibus_bus_create_input_context(self.as_ref().to_glib_none().0, client_name.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_create_input_context_async")]
    //fn create_input_context_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, client_name: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_create_input_context_async() }
    //}

    #[doc(alias = "ibus_bus_current_input_context")]
    fn current_input_context(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::ibus_bus_current_input_context(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_current_input_context_async")]
    //fn current_input_context_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_current_input_context_async() }
    //}

    #[doc(alias = "ibus_bus_exit")]
    fn exit(&self, restart: bool) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_exit(self.as_ref().to_glib_none().0, restart.into_glib()))
        }
    }

    //#[doc(alias = "ibus_bus_exit_async")]
    //fn exit_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, restart: bool, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_exit_async() }
    //}

    #[doc(alias = "ibus_bus_get_config")]
    #[doc(alias = "get_config")]
    fn config(&self) -> Option<Config> {
        unsafe {
            from_glib_none(ffi::ibus_bus_get_config(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_bus_get_connection")]
    #[doc(alias = "get_connection")]
    fn connection(&self) -> Option<gio::DBusConnection> {
        unsafe {
            from_glib_none(ffi::ibus_bus_get_connection(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_bus_get_engines_by_names")]
    #[doc(alias = "get_engines_by_names")]
    fn engines_by_names(&self, names: &[&str]) -> Vec<EngineDesc> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ibus_bus_get_engines_by_names(self.as_ref().to_glib_none().0, names.to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_bus_get_global_engine")]
    #[doc(alias = "get_global_engine")]
    fn global_engine(&self) -> Option<EngineDesc> {
        unsafe {
            from_glib_full(ffi::ibus_bus_get_global_engine(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_get_global_engine_async")]
    //#[doc(alias = "get_global_engine_async")]
    //fn global_engine_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_get_global_engine_async() }
    //}

    #[doc(alias = "ibus_bus_get_ibus_property")]
    #[doc(alias = "get_ibus_property")]
    fn ibus_property(&self, property_name: &str) -> Option<glib::Variant> {
        unsafe {
            from_glib_full(ffi::ibus_bus_get_ibus_property(self.as_ref().to_glib_none().0, property_name.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_get_ibus_property_async")]
    //#[doc(alias = "get_ibus_property_async")]
    //fn ibus_property_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, property_name: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_get_ibus_property_async() }
    //}

    #[doc(alias = "ibus_bus_get_name_owner")]
    #[doc(alias = "get_name_owner")]
    fn name_owner(&self, name: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::ibus_bus_get_name_owner(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_get_name_owner_async")]
    //#[doc(alias = "get_name_owner_async")]
    //fn name_owner_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, name: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_get_name_owner_async() }
    //}

    #[doc(alias = "ibus_bus_get_service_name")]
    #[doc(alias = "get_service_name")]
    fn service_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_bus_get_service_name(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    #[allow(deprecated)]
    #[doc(alias = "ibus_bus_get_use_global_engine")]
    #[doc(alias = "get_use_global_engine")]
    fn uses_global_engine(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_get_use_global_engine(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    //#[allow(deprecated)]
    //#[doc(alias = "ibus_bus_get_use_global_engine_async")]
    //#[doc(alias = "get_use_global_engine_async")]
    //fn use_global_engine_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_get_use_global_engine_async() }
    //}

    #[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    #[allow(deprecated)]
    #[doc(alias = "ibus_bus_get_use_sys_layout")]
    #[doc(alias = "get_use_sys_layout")]
    fn uses_sys_layout(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_get_use_sys_layout(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    //#[allow(deprecated)]
    //#[doc(alias = "ibus_bus_get_use_sys_layout_async")]
    //#[doc(alias = "get_use_sys_layout_async")]
    //fn use_sys_layout_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_get_use_sys_layout_async() }
    //}

    #[doc(alias = "ibus_bus_hello")]
    fn hello(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::ibus_bus_hello(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_bus_is_connected")]
    fn is_connected(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_is_connected(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    #[allow(deprecated)]
    #[doc(alias = "ibus_bus_is_global_engine_enabled")]
    fn is_global_engine_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_is_global_engine_enabled(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    //#[allow(deprecated)]
    //#[doc(alias = "ibus_bus_is_global_engine_enabled_async")]
    //fn is_global_engine_enabled_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_is_global_engine_enabled_async() }
    //}

    #[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    #[allow(deprecated)]
    #[doc(alias = "ibus_bus_list_active_engines")]
    fn list_active_engines(&self) -> Vec<EngineDesc> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ibus_bus_list_active_engines(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg_attr(feature = "v1_5_3", deprecated = "Since 1.5.3")]
    //#[allow(deprecated)]
    //#[doc(alias = "ibus_bus_list_active_engines_async")]
    //fn list_active_engines_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_list_active_engines_async() }
    //}

    #[doc(alias = "ibus_bus_list_engines")]
    fn list_engines(&self) -> Vec<EngineDesc> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ibus_bus_list_engines(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_list_engines_async")]
    //fn list_engines_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_list_engines_async() }
    //}

    #[doc(alias = "ibus_bus_list_names")]
    fn list_names(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ibus_bus_list_names(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_bus_list_queued_owners")]
    fn list_queued_owners(&self, name: &str) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::ibus_bus_list_queued_owners(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    #[doc(alias = "ibus_bus_name_has_owner")]
    fn name_has_owner(&self, name: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_name_has_owner(self.as_ref().to_glib_none().0, name.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_name_has_owner_async")]
    //fn name_has_owner_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, name: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_name_has_owner_async() }
    //}

    #[doc(alias = "ibus_bus_preload_engines")]
    fn preload_engines(&self, names: &[&str]) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_preload_engines(self.as_ref().to_glib_none().0, names.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_preload_engines_async")]
    //fn preload_engines_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, names: &[&str], timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_preload_engines_async() }
    //}

    #[doc(alias = "ibus_bus_register_component")]
    fn register_component(&self, component: &impl IsA<Component>) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_register_component(self.as_ref().to_glib_none().0, component.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_register_component_async")]
    //fn register_component_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, component: &impl IsA<Component>, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_register_component_async() }
    //}

    #[doc(alias = "ibus_bus_release_name")]
    fn release_name(&self, name: &str) -> u32 {
        unsafe {
            ffi::ibus_bus_release_name(self.as_ref().to_glib_none().0, name.to_glib_none().0)
        }
    }

    //#[doc(alias = "ibus_bus_release_name_async")]
    //fn release_name_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, name: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_release_name_async() }
    //}

    #[doc(alias = "ibus_bus_remove_match")]
    fn remove_match(&self, rule: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_remove_match(self.as_ref().to_glib_none().0, rule.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_remove_match_async")]
    //fn remove_match_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, rule: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_remove_match_async() }
    //}

    #[doc(alias = "ibus_bus_request_name")]
    fn request_name(&self, name: &str, flags: u32) -> u32 {
        unsafe {
            ffi::ibus_bus_request_name(self.as_ref().to_glib_none().0, name.to_glib_none().0, flags)
        }
    }

    //#[doc(alias = "ibus_bus_request_name_async")]
    //fn request_name_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, name: &str, flags: u32, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_request_name_async() }
    //}

    #[doc(alias = "ibus_bus_set_global_engine")]
    fn set_global_engine(&self, global_engine: &str) -> bool {
        unsafe {
            from_glib(ffi::ibus_bus_set_global_engine(self.as_ref().to_glib_none().0, global_engine.to_glib_none().0))
        }
    }

    //#[doc(alias = "ibus_bus_set_global_engine_async")]
    //fn set_global_engine_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, global_engine: &str, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_set_global_engine_async() }
    //}

    //#[cfg(feature = "v1_5_29")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_5_29")))]
    //#[doc(alias = "ibus_bus_set_global_shortcut_keys")]
    //fn set_global_shortcut_keys(&self, gtype: BusGlobalBindingType, keys: /*Ignored*/&[ProcessKeyEventData]) -> bool {
    //    unsafe { TODO: call ffi:ibus_bus_set_global_shortcut_keys() }
    //}

    //#[cfg(feature = "v1_5_29")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v1_5_29")))]
    //#[doc(alias = "ibus_bus_set_global_shortcut_keys_async")]
    //fn set_global_shortcut_keys_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, gtype: BusGlobalBindingType, keys: /*Ignored*/&[ProcessKeyEventData], timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_set_global_shortcut_keys_async() }
    //}

    #[doc(alias = "ibus_bus_set_ibus_property")]
    fn set_ibus_property(&self, property_name: &str, value: &glib::Variant) {
        unsafe {
            ffi::ibus_bus_set_ibus_property(self.as_ref().to_glib_none().0, property_name.to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[doc(alias = "ibus_bus_set_ibus_property_async")]
    //fn set_ibus_property_async<P: FnOnce(Result<(), glib::Error>) + 'static>(&self, property_name: &str, value: &glib::Variant, timeout_msec: i32, cancellable: Option<&impl IsA<gio::Cancellable>>, callback: P) {
    //    unsafe { TODO: call ffi:ibus_bus_set_ibus_property_async() }
    //}

    #[doc(alias = "ibus_bus_set_watch_dbus_signal")]
    fn set_watch_dbus_signal(&self, watch: bool) {
        unsafe {
            ffi::ibus_bus_set_watch_dbus_signal(self.as_ref().to_glib_none().0, watch.into_glib());
        }
    }

    #[doc(alias = "ibus_bus_set_watch_ibus_signal")]
    fn set_watch_ibus_signal(&self, watch: bool) {
        unsafe {
            ffi::ibus_bus_set_watch_ibus_signal(self.as_ref().to_glib_none().0, watch.into_glib());
        }
    }

    #[doc(alias = "client-only")]
    fn is_client_only(&self) -> bool {
        ObjectExt::property(self.as_ref(), "client-only")
    }

    #[doc(alias = "connect-async")]
    fn is_connect_async(&self) -> bool {
        ObjectExt::property(self.as_ref(), "connect-async")
    }

    #[doc(alias = "connected")]
    fn connect_connected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn connected_trampoline<P: IsA<Bus>, F: Fn(&P) + 'static>(this: *mut ffi::IBusBus, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Bus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"connected\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(connected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "disconnected")]
    fn connect_disconnected<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn disconnected_trampoline<P: IsA<Bus>, F: Fn(&P) + 'static>(this: *mut ffi::IBusBus, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Bus::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"disconnected\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(disconnected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "global-engine-changed")]
    fn connect_global_engine_changed<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn global_engine_changed_trampoline<P: IsA<Bus>, F: Fn(&P, &str) + 'static>(this: *mut ffi::IBusBus, name: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Bus::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(name))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"global-engine-changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(global_engine_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "global-shortcut-key-responded")]
    fn connect_global_shortcut_key_responded<F: Fn(&Self, u8, bool, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn global_shortcut_key_responded_trampoline<P: IsA<Bus>, F: Fn(&P, u8, bool, bool) + 'static>(this: *mut ffi::IBusBus, type_: u8, is_pressed: glib::ffi::gboolean, is_backward: glib::ffi::gboolean, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Bus::from_glib_borrow(this).unsafe_cast_ref(), type_, from_glib(is_pressed), from_glib(is_backward))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"global-shortcut-key-responded\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(global_shortcut_key_responded_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name-owner-changed")]
    fn connect_name_owner_changed<F: Fn(&Self, &str, &str, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn name_owner_changed_trampoline<P: IsA<Bus>, F: Fn(&P, &str, &str, &str) + 'static>(this: *mut ffi::IBusBus, name: *mut libc::c_char, old_owner: *mut libc::c_char, new_owner: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Bus::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(name), &glib::GString::from_glib_borrow(old_owner), &glib::GString::from_glib_borrow(new_owner))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"name-owner-changed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(name_owner_changed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Bus>> BusExt for O {}
